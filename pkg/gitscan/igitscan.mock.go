// Code generated by MockGen. DO NOT EDIT.
// Source: gitscan.go

// Package gitscan is a generated GoMock package.
package gitscan

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vumanhcuongit/scan/pkg/models"
)

// MockIGitScan is a mock of IGitScan interface.
type MockIGitScan struct {
	ctrl     *gomock.Controller
	recorder *MockIGitScanMockRecorder
}

// MockIGitScanMockRecorder is the mock recorder for MockIGitScan.
type MockIGitScanMockRecorder struct {
	mock *MockIGitScan
}

// NewMockIGitScan creates a new mock instance.
func NewMockIGitScan(ctrl *gomock.Controller) *MockIGitScan {
	mock := &MockIGitScan{ctrl: ctrl}
	mock.recorder = &MockIGitScanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGitScan) EXPECT() *MockIGitScanMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockIGitScan) Scan(ctx context.Context, ownerName, repoName string) ([]models.Finding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", ctx, ownerName, repoName)
	ret0, _ := ret[0].([]models.Finding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockIGitScanMockRecorder) Scan(ctx, ownerName, repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockIGitScan)(nil).Scan), ctx, ownerName, repoName)
}
