// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vumanhcuongit/scan/pkg/models"
)

// MockIScanService is a mock of IScanService interface.
type MockIScanService struct {
	ctrl     *gomock.Controller
	recorder *MockIScanServiceMockRecorder
}

// MockIScanServiceMockRecorder is the mock recorder for MockIScanService.
type MockIScanServiceMockRecorder struct {
	mock *MockIScanService
}

// NewMockIScanService creates a new mock instance.
func NewMockIScanService(ctrl *gomock.Controller) *MockIScanService {
	mock := &MockIScanService{ctrl: ctrl}
	mock.recorder = &MockIScanServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIScanService) EXPECT() *MockIScanServiceMockRecorder {
	return m.recorder
}

// CreateRepository mocks base method.
func (m *MockIScanService) CreateRepository(ctx context.Context, request *CreateRepositoryRequest) (*models.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", ctx, request)
	ret0, _ := ret[0].(*models.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockIScanServiceMockRecorder) CreateRepository(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockIScanService)(nil).CreateRepository), ctx, request)
}

// DeleteRepository mocks base method.
func (m *MockIScanService) DeleteRepository(ctx context.Context, repositoryID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", ctx, repositoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepository indicates an expected call of DeleteRepository.
func (mr *MockIScanServiceMockRecorder) DeleteRepository(ctx, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockIScanService)(nil).DeleteRepository), ctx, repositoryID)
}

// GetRepository mocks base method.
func (m *MockIScanService) GetRepository(ctx context.Context, repositoryID int64) (*models.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", ctx, repositoryID)
	ret0, _ := ret[0].(*models.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockIScanServiceMockRecorder) GetRepository(ctx, repositoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockIScanService)(nil).GetRepository), ctx, repositoryID)
}

// HandleResultMessage mocks base method.
func (m *MockIScanService) HandleResultMessage(ctx context.Context, result *models.ScanResultMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleResultMessage", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleResultMessage indicates an expected call of HandleResultMessage.
func (mr *MockIScanServiceMockRecorder) HandleResultMessage(ctx, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleResultMessage", reflect.TypeOf((*MockIScanService)(nil).HandleResultMessage), ctx, result)
}

// ListRepositories mocks base method.
func (m *MockIScanService) ListRepositories(ctx context.Context, request *ListRepositoriesRequest) ([]*models.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories", ctx, request)
	ret0, _ := ret[0].([]*models.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories.
func (mr *MockIScanServiceMockRecorder) ListRepositories(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockIScanService)(nil).ListRepositories), ctx, request)
}

// ListScans mocks base method.
func (m *MockIScanService) ListScans(ctx context.Context, request *ListScansRequest) ([]*models.Scan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScans", ctx, request)
	ret0, _ := ret[0].([]*models.Scan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScans indicates an expected call of ListScans.
func (mr *MockIScanServiceMockRecorder) ListScans(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScans", reflect.TypeOf((*MockIScanService)(nil).ListScans), ctx, request)
}

// Start mocks base method.
func (m *MockIScanService) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockIScanServiceMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIScanService)(nil).Start), ctx)
}

// TriggerScan mocks base method.
func (m *MockIScanService) TriggerScan(ctx context.Context, request *TriggerScanRequest) (*models.Scan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerScan", ctx, request)
	ret0, _ := ret[0].(*models.Scan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerScan indicates an expected call of TriggerScan.
func (mr *MockIScanServiceMockRecorder) TriggerScan(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerScan", reflect.TypeOf((*MockIScanService)(nil).TriggerScan), ctx, request)
}

// UpdateRepository mocks base method.
func (m *MockIScanService) UpdateRepository(ctx context.Context, repositoryID int64, request *UpdateRepositoryRequest) (*models.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepository", ctx, repositoryID, request)
	ret0, _ := ret[0].(*models.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepository indicates an expected call of UpdateRepository.
func (mr *MockIScanServiceMockRecorder) UpdateRepository(ctx, repositoryID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepository", reflect.TypeOf((*MockIScanService)(nil).UpdateRepository), ctx, repositoryID, request)
}

// UpdateScan mocks base method.
func (m *MockIScanService) UpdateScan(ctx context.Context, scan *models.Scan, request *UpdateScanRequest) (*models.Scan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScan", ctx, scan, request)
	ret0, _ := ret[0].(*models.Scan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScan indicates an expected call of UpdateScan.
func (mr *MockIScanServiceMockRecorder) UpdateScan(ctx, scan, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScan", reflect.TypeOf((*MockIScanService)(nil).UpdateScan), ctx, scan, request)
}
