// Code generated by MockGen. DO NOT EDIT.
// Source: irepo.go

// Package repos is a generated GoMock package.
package repos

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vumanhcuongit/scan/pkg/models"
)

// MockIRepo is a mock of IRepo interface.
type MockIRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRepoMockRecorder
}

// MockIRepoMockRecorder is the mock recorder for MockIRepo.
type MockIRepoMockRecorder struct {
	mock *MockIRepo
}

// NewMockIRepo creates a new mock instance.
func NewMockIRepo(ctrl *gomock.Controller) *MockIRepo {
	mock := &MockIRepo{ctrl: ctrl}
	mock.recorder = &MockIRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepo) EXPECT() *MockIRepoMockRecorder {
	return m.recorder
}

// Repository mocks base method.
func (m *MockIRepo) Repository() IRepositoryRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repository")
	ret0, _ := ret[0].(IRepositoryRepo)
	return ret0
}

// Repository indicates an expected call of Repository.
func (mr *MockIRepoMockRecorder) Repository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repository", reflect.TypeOf((*MockIRepo)(nil).Repository))
}

// Scan mocks base method.
func (m *MockIRepo) Scan() IScanRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan")
	ret0, _ := ret[0].(IScanRepo)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockIRepoMockRecorder) Scan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockIRepo)(nil).Scan))
}

// Stop mocks base method.
func (m *MockIRepo) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockIRepoMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIRepo)(nil).Stop))
}

// WithTransaction mocks base method.
func (m *MockIRepo) WithTransaction(ctx context.Context, fn func(IRepo) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockIRepoMockRecorder) WithTransaction(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockIRepo)(nil).WithTransaction), ctx, fn)
}

// MockIRepositoryRepo is a mock of IRepositoryRepo interface.
type MockIRepositoryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryRepoMockRecorder
}

// MockIRepositoryRepoMockRecorder is the mock recorder for MockIRepositoryRepo.
type MockIRepositoryRepoMockRecorder struct {
	mock *MockIRepositoryRepo
}

// NewMockIRepositoryRepo creates a new mock instance.
func NewMockIRepositoryRepo(ctrl *gomock.Controller) *MockIRepositoryRepo {
	mock := &MockIRepositoryRepo{ctrl: ctrl}
	mock.recorder = &MockIRepositoryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositoryRepo) EXPECT() *MockIRepositoryRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRepositoryRepo) Create(ctx context.Context, record *models.Repository) (*models.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, record)
	ret0, _ := ret[0].(*models.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRepositoryRepoMockRecorder) Create(ctx, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepositoryRepo)(nil).Create), ctx, record)
}

// Delete mocks base method.
func (m *MockIRepositoryRepo) Delete(ctx context.Context, record *models.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIRepositoryRepoMockRecorder) Delete(ctx, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRepositoryRepo)(nil).Delete), ctx, record)
}

// GetByID mocks base method.
func (m *MockIRepositoryRepo) GetByID(ctx context.Context, id int64) (*models.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIRepositoryRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIRepositoryRepo)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockIRepositoryRepo) List(ctx context.Context, size, page int, filter *models.RepositoryFilter) ([]*models.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, size, page, filter)
	ret0, _ := ret[0].([]*models.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIRepositoryRepoMockRecorder) List(ctx, size, page, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIRepositoryRepo)(nil).List), ctx, size, page, filter)
}

// UpdateWithMap mocks base method.
func (m *MockIRepositoryRepo) UpdateWithMap(ctx context.Context, record *models.Repository, params map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithMap", ctx, record, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithMap indicates an expected call of UpdateWithMap.
func (mr *MockIRepositoryRepoMockRecorder) UpdateWithMap(ctx, record, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithMap", reflect.TypeOf((*MockIRepositoryRepo)(nil).UpdateWithMap), ctx, record, params)
}

// MockIScanRepo is a mock of IScanRepo interface.
type MockIScanRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIScanRepoMockRecorder
}

// MockIScanRepoMockRecorder is the mock recorder for MockIScanRepo.
type MockIScanRepoMockRecorder struct {
	mock *MockIScanRepo
}

// NewMockIScanRepo creates a new mock instance.
func NewMockIScanRepo(ctrl *gomock.Controller) *MockIScanRepo {
	mock := &MockIScanRepo{ctrl: ctrl}
	mock.recorder = &MockIScanRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIScanRepo) EXPECT() *MockIScanRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIScanRepo) Create(ctx context.Context, record *models.Scan) (*models.Scan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, record)
	ret0, _ := ret[0].(*models.Scan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIScanRepoMockRecorder) Create(ctx, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIScanRepo)(nil).Create), ctx, record)
}

// Delete mocks base method.
func (m *MockIScanRepo) Delete(ctx context.Context, record *models.Scan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIScanRepoMockRecorder) Delete(ctx, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIScanRepo)(nil).Delete), ctx, record)
}

// GetByID mocks base method.
func (m *MockIScanRepo) GetByID(ctx context.Context, id int64) (*models.Scan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Scan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIScanRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIScanRepo)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockIScanRepo) List(ctx context.Context, size, page int, filter *models.ScanFilter) ([]*models.Scan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, size, page, filter)
	ret0, _ := ret[0].([]*models.Scan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIScanRepoMockRecorder) List(ctx, size, page, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIScanRepo)(nil).List), ctx, size, page, filter)
}

// MarkStaleScansAsFailure mocks base method.
func (m *MockIScanRepo) MarkStaleScansAsFailure(ctx context.Context, maxMinutes int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkStaleScansAsFailure", ctx, maxMinutes)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkStaleScansAsFailure indicates an expected call of MarkStaleScansAsFailure.
func (mr *MockIScanRepoMockRecorder) MarkStaleScansAsFailure(ctx, maxMinutes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkStaleScansAsFailure", reflect.TypeOf((*MockIScanRepo)(nil).MarkStaleScansAsFailure), ctx, maxMinutes)
}

// UpdateWithMap mocks base method.
func (m *MockIScanRepo) UpdateWithMap(ctx context.Context, record *models.Scan, params map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithMap", ctx, record, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithMap indicates an expected call of UpdateWithMap.
func (mr *MockIScanRepoMockRecorder) UpdateWithMap(ctx, record, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithMap", reflect.TypeOf((*MockIScanRepo)(nil).UpdateWithMap), ctx, record, params)
}
